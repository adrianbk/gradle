import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.ThreadFactory

ExecutorService executor = Executors.newSingleThreadExecutor(new ThreadFactory() {
    @Override
    Thread newThread(Runnable runnable) {
        Thread thread = Executors.defaultThreadFactory().newThread(runnable)
        thread.setDaemon(true)
        return thread
    }
})

task startHeartBeat << {
    logger.lifecycle("Starting heartbeat.")
    executor.execute(new Heartbeat(logger));
}

task stopHeartBeat << {
    logger.lifecycle("Shutting down heartbeat.")
    executor.shutdownNow();
}

class Heartbeat implements Runnable {
    int frequency = 5 * 60 * 1000
    def logger

    public Heartbeat(logger) {
        this.logger = logger
    }

    @Override
    public void run() {
        boolean beating = true
        while (beating) {
            logger.lifecycle(" [heartbeat] ")
            try {
                Thread.sleep(frequency)
            } catch (InterruptedException e) {
                beating = false
                logger.lifecycle("Heartbeat thread Interrupted")
            }
        }
    }
}

def integTestBuckets = [
    //1
    [':modelCore'],

    //2
    [':announce', ':antlr', ':baseServices', ':baseServicesGroovy', ':internalIntegTesting', ':internalTesting', ':maven', ':messaging',
     ':performance', ':platformBase', ':platformJvm', ':reporting', ':resources', ':resourcesHttp', ':resourcesS3', ':resourcesSftp'],

    //3
    [':buildComparison', ':buildInit', ':cli', ':codeQuality'],

    //4
    [':docs', ':ear', ':ide', ':ideNative', ':ivy', ':jacoco', ':javascript', ':jetty', ':languageGroovy', ':languageJava', ':languageJvm'],

    //5
    [':integTest'], //INTERMITTENT :integTest:integTest ./travisci_build.sh: line 6:  4430 Killed

    //6
    [':launcher'],

    //7
    [':languageNative', ':platformNative', ':testingNative', ':native'],

    //8
    [':modelGroovy', ':pluginDevelopment', ':pluginUse', ':publish'],

    //9
    [':scala', ':signing', ':sonar'],

    //10
    [':openApi', ':osgi', ':toolingApiBuilders', ':ui', ':wrapper'],

    //11
    [':languageScala', ':diagnostics'],

    //12
    [':dependencyManagement'],

    //13
    //(Failing due to resources, most likely disk space) :distributions:integTest./travisci_build.sh: line 6:  4414 Killed
    [':distributions'],

    //14
    [':core'], //Intermittently fails

    //15
    [':toolingApi'], //Intermittently fails withProcess 'Gradle Compiler Daemon 1' finished with non-zero exit value 137

    //16
    [':plugins'], //Exceeds 50 minutes

    //17
    ['platformPlay'] //Exceeds 50 minutes but also gets killed: :platformPlay:integTest./travisci_build.sh: line 6:  4416 Killed

]

def integTestSplits = integTestBuckets.collect { it.collect { p -> project(p) } }
assert integTestSplits.flatten().size() == project.subprojects.size(): "All projects should be included"

integTestSplits.eachWithIndex { List<Project> bucket, int i ->
    createPrBuildType(i, bucket, 'IntegTest', ['integTest'])
}

def matrixSize = 3
def commitSplits = (1..matrixSize).collect { [] }
project.subprojects.asList().eachWithIndex { project, i ->
    commitSplits[(i % matrixSize)] << project
}

commitSplits.eachWithIndex { List<Project> bucket, int i ->
    createPrBuildType(i, bucket, 'Commit', ['codeQuality', 'test'])
}

gradle.taskGraph.whenReady { graph ->
    def task = graph.getAllTasks()?.find { it.name.startsWith('split') }
    if (task) {
        logger.quiet("============================================")
        logger.quiet("Split Task: ${task.name} configured to test the following projects: ")
        task.projectNames.each { logger.quiet("${it}") }
        logger.quiet("============================================")
    }
}

/**
 * Create a pull request build type for a single split
 * @param i the zero based index for the split
 * @param projects - the projects included in the given split
 * @param name - the name of the build type
 * @param dependantTasks - the tasks that this build type will depend on
 */
private void createPrBuildType(int i, List<Project> projects, String name, List<String> dependantTasks) {
    def index = i + 1
    def testTask = project.tasks.create("split${name}${index}", {
        ext.projectNames = projects.collect { it.name }
    })

    projects.each { Project project ->
        dependantTasks.each {
            def dependant = project.tasks.findByPath(it)
            if (dependant) {
                testTask.dependsOn(dependant)
            }
        }
    }
    project.getExtensions().buildTypes."pr${name}Build${index}"("startHeartBeat", testTask.name, "stopHeartBeat")
}
