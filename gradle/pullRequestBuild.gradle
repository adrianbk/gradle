import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.ThreadFactory

ExecutorService executor = Executors.newSingleThreadExecutor(new ThreadFactory() {
    @Override
    Thread newThread(Runnable runnable) {
        Thread thread = Executors.defaultThreadFactory().newThread(runnable)
        thread.setDaemon(true)
        return thread
    }
})

task startHeartBeat << {
    logger.lifecycle("Starting heartbeat.")
    executor.execute(new Heartbeat(logger));
}

task stopHeartBeat << {
    logger.lifecycle("Shutting down heartbeat.")
    executor.shutdownNow();
}

class Heartbeat implements Runnable {
    int frequency = 5 * 60 * 1000
    def logger
    Clock clock

    public Heartbeat(logger) {
        this.logger = logger
    }

    @Override
    public void run() {
        clock = new Clock()
        boolean beating = true
        while (beating) {
            logger.lifecycle(" [heartbeat:  ${clock.getTime()}] ")
            try {
                Thread.sleep(frequency)
            } catch (InterruptedException e) {
                beating = false
                logger.lifecycle("Heartbeat thread Interrupted")
            }
        }
    }
}


def integTestBuckets = [

    [':modelCore', ':announce', ':antlr', ':internalIntegTesting', ':internalTesting', ':maven', ':messaging',
     ':performance', ':platformBase', ':platformJvm',':buildComparison', ':buildInit', ':cli', ':codeQuality'],


    [':docs', ':ear', ':ide', ':ideNative', ':ivy', ':jacoco', ':javascript', ':jetty', ':languageGroovy', ':languageJvm',
     ':launcher', ':languageNative', ':platformNative', ':testingNative', ':native'],


    ['platformPlay'],

    [':dependencyManagement', ':core', ':toolingApi'],

    [':modelGroovy', ':pluginDevelopment', ':pluginUse', ':publish', ':scala', ':signing', ':sonar',
     ':openApi', ':osgi', ':toolingApiBuilders', ':ui', ':wrapper', ':languageScala', ':diagnostics'],

    [':plugins', ':integTest'],

    [':baseServices', ':baseServicesGroovy', ':reporting', ':resources', ':resourcesHttp', ':resourcesS3', ':resourcesSftp'],

    [':distributions', ':languageJava']
]

def integTestSplits = integTestBuckets.collect { it.collect { p -> project(p) } }
assert integTestSplits.flatten().size() == project.subprojects.size(): "All projects should be included"

integTestSplits.eachWithIndex { List<Project> bucket, int i ->
    createPrBuildType(i, bucket, 'IntegTest', ['integTest'])
}

def commitBucketCount = 1
def commitSplits = (1..commitBucketCount).collect { [] }
project.subprojects.asList().eachWithIndex { project, i ->
    commitSplits[(i % commitBucketCount)] << project
}

commitSplits.eachWithIndex { List<Project> bucket, int i ->
    createPrBuildType(i, bucket, 'Commit', ['codeQuality', 'test'])
}

gradle.taskGraph.whenReady { graph ->
    def task = graph.getAllTasks()?.find { it.name.startsWith('split') }
    if (task) {
        logger.quiet("============================================")
        logger.quiet("Split Task: ${task.name} configured to test the following projects: ")
        task.projectNames.each { logger.quiet("${it}") }
        logger.quiet("============================================")
    }
}

/**
 * Create a pull request build type for a single split
 * @param i the zero based index for the split
 * @param projects - the projects included in the given split
 * @param name - the name of the build type
 * @param dependantTasks - the tasks that this build type will depend on
 */
private void createPrBuildType(int i, List<Project> projects, String name, List<String> dependantTasks) {
    def index = i + 1
    def testTask = project.tasks.create(name: "split${name}${index}", group: 'pr', {
        ext.projectNames = projects.collect { it.name }
    })

    def copyTestResults = project.tasks.create(name: "split${name}${index}CopyTestReports", group: 'pr')

    projects.each { Project project ->
        dependantTasks.each {
            def dependant = project.tasks.findByPath(it)
            if (dependant) {
                if (dependant instanceof Test) {
                    //Create a task to copy the test results
                    CopySpec copyTestTaskTestResults = project.tasks.create(name: "${dependant.name}CopyTestReports", type: Copy, group: 'pr', {
                        from file(dependant.reports.getJunitXml().destination)
                        into("${project.rootDir}/shippable/testresults/")
                    })
                    copyTestResults.dependsOn copyTestTaskTestResults
                }
                testTask.dependsOn(dependant)
            }
        }
    }

    //Include 'copyTestResults.name' once this issue is resolved https://github.com/Shippable/support/issues/1525
    project.getExtensions().buildTypes."pr${name}Build${index}"("clean", "startHeartBeat", testTask.name, "stopHeartBeat")
}
